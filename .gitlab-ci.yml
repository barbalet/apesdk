# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: gcc

variables:
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - git submodule sync --recursive
  - git submodule update --init --recursive
  
build:
  stage: build
  script: 
    - ./build.sh

.build-toolkit:
  script:
    - echo "toolkit test directory"
    - cd toolkit
    - cd test
    - ./test_toolkit_wo_exec.sh --coverage
    - echo "test_toolkit_wo_exec"

build-toolkit:
  stage: build
  script:
    - echo "toolkit test directory"
    - cd toolkit
    - cd test
    - ./test_toolkit_wo_exec.sh --coverage
    - echo "test_toolkit_wo_exec"
    
build-apescript:
  stage: build
  script:
    - cd test
    - ./test_script_wo_exec.sh

build-simtime:
  stage: build
  script:
    - cd test
    - ./test_wo_exec.sh

build-gui:
  stage: build
  script:
    - cd test
    - ./test_gui_wo_exec.sh

checksimape:
  stage: test
  needs: [build]
  script: 
    - ./checksimape.sh

coverage_math:
  stage: test
  needs: [build-toolkit]
  script:
    - echo "toolkit test directory"
    - cd toolkit
    - cd test
    - ./test_toolkit_wo_exec.sh --coverage
    - echo "test_toolkit_wo_exec"
    - ./test_math
    - gcov -n -w *.gcda
    - rm *.gc*
    - rm test_math
    - rm *.o

coverage_apescript:
  stage: test
  needs: [build-apescript]
  script:
    - cd test
    - ./test_script_wo_exec.sh --coverage
    - ./test_apescript check_apescript.txt
    - gcov -n -w *.gcda
    - rm *.gc*
    - rm test_apescript
    - rm *.o
    
coverage_testcli:
  stage: test
  script:
    - cd cli
    - cd test
    - ./testcli.sh

#coverage_sim_time:
#  stage: test
#  needs: [build-simtime]
#  script:
#    - cd test
#    - ./test_wo_exec.sh --coverage
#    - ./test_sim_time talesOfAnUnknownSimulator
#    - gcov -n -w *.gcda
#    - rm *.gc*
#    - rm test_sim_time
#    - rm *.o

coverage_object:
  stage: test
  needs: [build-toolkit]
  script:
    - cd toolkit
    - cd test
    - ./test_toolkit_wo_exec.sh --coverage
    - ./test_object
    - gcov -n -w *.gcda
    - rm *.gc*
    - rm test_object
    - rm *.o
    
coverage_object_file:
  stage: test
  needs: [build-toolkit]
  script:
    - cd toolkit
    - cd test
    - ./test_toolkit_wo_exec.sh --coverage
    - ./test_object_file.sh
    - rm *.gc*
    - rm test_object_file
    - rm *.o

coverage_object_file_vect2:
  stage: test
  needs: [build-toolkit]
  script:
    - cd toolkit
    - cd test
    - ./test_toolkit_wo_exec.sh --coverage
    - ./test_object_file_vect2.sh
    - gcov -n -w *.gcda
    - rm *.gc*
    - rm *.o

coverage_object_string:
  stage: test
  needs: [build-toolkit]
  script:
    - cd toolkit
    - cd test
    - ./test_toolkit_wo_exec.sh --coverage
    - ./test_object_string
    - gcov -n -w *.gcda
    - rm *.gc*
    - rm test_object_string
    - rm *.o

coverage_prototype:
  stage: test
  needs: [build-toolkit]
  script:
    - cd toolkit
    - cd test
    - ./test_toolkit_wo_exec.sh --coverage
    - ./test_prototype
    - gcov -n -w *.gcda
    - rm *.gc*
    - rm test_prototype
    - rm *.o

coverage_gui:
  stage: test
  needs: [build-gui]
  script:
    - cd test
    - ./test_gui_wo_exec.sh --coverage
    - ./test_gui
    - gcov -n -w *.gcda
    - rm *.gc*
    - rm test_gui
    - rm *.o

    
#test_sim:
#  stage: test
#  needs: [build-simtime]
#  script:
#    - cd test
#    - ./test_wo_exec.sh
#    - ./test_sim
#    - rm test_sim
#    - rm *.o


